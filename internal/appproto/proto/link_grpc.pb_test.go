// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: internal/appproto/proto/link.proto

package appproto

import (
	context "context"
	"testing"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinksServiceClient is the client API for LinksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinksServiceClient interface {
	PutLink(ctx context.Context, in *PutLinkRequest, opts ...grpc.CallOption) (*PutLinkResponse, error)
	PutBatchLink(ctx context.Context, in *PutBatchLinkRequest, opts ...grpc.CallOption) (*PutBatchLinkResponse, error)
	PingDataBase(ctx context.Context, in *PingDataBaseRequest, opts ...grpc.CallOption) (*PingDataBaseResponse, error)
	GivLink(ctx context.Context, in *GivLinkRequest, opts ...grpc.CallOption) (*GivLinkResponse, error)
	GivUserLinks(ctx context.Context, in *GivUserLinksRequest, opts ...grpc.CallOption) (*GivUserLinksResponse, error)
	DelUserLinks(ctx context.Context, in *DelUserLinksRequest, opts ...grpc.CallOption) (*DelUserLinksResponse, error)
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error)
}

type linksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinksServiceClient(cc grpc.ClientConnInterface) LinksServiceClient {
	return &linksServiceClient{cc}
}

func (c *linksServiceClient) PutLink(ctx context.Context, in *PutLinkRequest, opts ...grpc.CallOption) (*PutLinkResponse, error) {
	out := new(PutLinkResponse)
	err := c.cc.Invoke(ctx, "/appproto.LinksService/PutLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksServiceClient) PutBatchLink(ctx context.Context, in *PutBatchLinkRequest, opts ...grpc.CallOption) (*PutBatchLinkResponse, error) {
	out := new(PutBatchLinkResponse)
	err := c.cc.Invoke(ctx, "/appproto.LinksService/PutBatchLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksServiceClient) PingDataBase(ctx context.Context, in *PingDataBaseRequest, opts ...grpc.CallOption) (*PingDataBaseResponse, error) {
	out := new(PingDataBaseResponse)
	err := c.cc.Invoke(ctx, "/appproto.LinksService/PingDataBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksServiceClient) GivLink(ctx context.Context, in *GivLinkRequest, opts ...grpc.CallOption) (*GivLinkResponse, error) {
	out := new(GivLinkResponse)
	err := c.cc.Invoke(ctx, "/appproto.LinksService/GivLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksServiceClient) GivUserLinks(ctx context.Context, in *GivUserLinksRequest, opts ...grpc.CallOption) (*GivUserLinksResponse, error) {
	out := new(GivUserLinksResponse)
	err := c.cc.Invoke(ctx, "/appproto.LinksService/GivUserLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksServiceClient) DelUserLinks(ctx context.Context, in *DelUserLinksRequest, opts ...grpc.CallOption) (*DelUserLinksResponse, error) {
	out := new(DelUserLinksResponse)
	err := c.cc.Invoke(ctx, "/appproto.LinksService/DelUserLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksServiceClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, "/appproto.LinksService/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinksServiceServer is the server API for LinksService service.
// All implementations must embed UnimplementedLinksServiceServer
// for forward compatibility
type LinksServiceServer interface {
	PutLink(context.Context, *PutLinkRequest) (*PutLinkResponse, error)
	PutBatchLink(context.Context, *PutBatchLinkRequest) (*PutBatchLinkResponse, error)
	PingDataBase(context.Context, *PingDataBaseRequest) (*PingDataBaseResponse, error)
	GivLink(context.Context, *GivLinkRequest) (*GivLinkResponse, error)
	GivUserLinks(context.Context, *GivUserLinksRequest) (*GivUserLinksResponse, error)
	DelUserLinks(context.Context, *DelUserLinksRequest) (*DelUserLinksResponse, error)
	Stat(context.Context, *StatRequest) (*StatResponse, error)
	mustEmbedUnimplementedLinksServiceServer()
}

// UnimplementedLinksServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLinksServiceServer struct {
}

func (UnimplementedLinksServiceServer) PutLink(context.Context, *PutLinkRequest) (*PutLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutLink not implemented")
}
func (UnimplementedLinksServiceServer) PutBatchLink(context.Context, *PutBatchLinkRequest) (*PutBatchLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutBatchLink not implemented")
}
func (UnimplementedLinksServiceServer) PingDataBase(context.Context, *PingDataBaseRequest) (*PingDataBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingDataBase not implemented")
}
func (UnimplementedLinksServiceServer) GivLink(context.Context, *GivLinkRequest) (*GivLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GivLink not implemented")
}
func (UnimplementedLinksServiceServer) GivUserLinks(context.Context, *GivUserLinksRequest) (*GivUserLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GivUserLinks not implemented")
}
func (UnimplementedLinksServiceServer) DelUserLinks(context.Context, *DelUserLinksRequest) (*DelUserLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserLinks not implemented")
}
func (UnimplementedLinksServiceServer) Stat(context.Context, *StatRequest) (*StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedLinksServiceServer) mustEmbedUnimplementedLinksServiceServer() {}

// UnsafeLinksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinksServiceServer will
// result in compilation errors.
type UnsafeLinksServiceServer interface {
	mustEmbedUnimplementedLinksServiceServer()
}

func RegisterLinksServiceServer(s grpc.ServiceRegistrar, srv LinksServiceServer) {
	s.RegisterService(&LinksService_ServiceDesc, srv)
}

func _LinksService_PutLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServiceServer).PutLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appproto.LinksService/PutLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServiceServer).PutLink(ctx, req.(*PutLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinksService_PutBatchLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutBatchLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServiceServer).PutBatchLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appproto.LinksService/PutBatchLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServiceServer).PutBatchLink(ctx, req.(*PutBatchLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinksService_PingDataBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingDataBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServiceServer).PingDataBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appproto.LinksService/PingDataBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServiceServer).PingDataBase(ctx, req.(*PingDataBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinksService_GivLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GivLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServiceServer).GivLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appproto.LinksService/GivLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServiceServer).GivLink(ctx, req.(*GivLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinksService_GivUserLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GivUserLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServiceServer).GivUserLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appproto.LinksService/GivUserLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServiceServer).GivUserLinks(ctx, req.(*GivUserLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinksService_DelUserLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServiceServer).DelUserLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appproto.LinksService/DelUserLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServiceServer).DelUserLinks(ctx, req.(*DelUserLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinksService_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServiceServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appproto.LinksService/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServiceServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LinksService_ServiceDesc is the grpc.ServiceDesc for LinksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appproto.LinksService",
	HandlerType: (*LinksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutLink",
			Handler:    _LinksService_PutLink_Handler,
		},
		{
			MethodName: "PutBatchLink",
			Handler:    _LinksService_PutBatchLink_Handler,
		},
		{
			MethodName: "PingDataBase",
			Handler:    _LinksService_PingDataBase_Handler,
		},
		{
			MethodName: "GivLink",
			Handler:    _LinksService_GivLink_Handler,
		},
		{
			MethodName: "GivUserLinks",
			Handler:    _LinksService_GivUserLinks_Handler,
		},
		{
			MethodName: "DelUserLinks",
			Handler:    _LinksService_DelUserLinks_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _LinksService_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/appproto/proto/link.proto",
}

func Test_Empty1(t *testing.T) {
	t.Skip()
}
